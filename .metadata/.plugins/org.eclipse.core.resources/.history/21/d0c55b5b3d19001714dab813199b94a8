import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;


public class board {

	private ArrayList<ArrayList<ArrayList<Stone>>> state;
	private ArrayList<ArrayList<Integer>> plays;
	private Stone nextMove;
	
	public board() {
		ArrayList<Integer> zeroList = new ArrayList<Integer>(0);
		for (int i = 0; i <5; i++){
			zeroList.add(1);
		}
		ArrayList<Stone> emptyList = new ArrayList<Stone>(0);
		for (int i = 0; i <5; i++){
			emptyList.add(Stone.EMPTY);
		}
		state = new ArrayList<ArrayList<ArrayList<Stone>>>(0);
		plays = new ArrayList<ArrayList<Integer>>(0);
		for (int i = 0; i <5; i++){
			state.add(new ArrayList<ArrayList<Stone>>(0));
			plays.add(new ArrayList<Integer>(zeroList));
			for (int j = 0; j <5; j++){
				state.get(i).add(new ArrayList<Stone>(emptyList));
			}
		}
		nextMove = Stone.random();
	}
	
	public board(Stone startingPlayer){
		switch(startingPlayer){
		case EMPTY: 
			System.err.println("Not a player. Player is chosen randomly");
			nextMove = Stone.random();
		default:
			nextMove = startingPlayer;
		}
		ArrayList<Integer> zeroList = new ArrayList<Integer>(0);
		for (int i = 0; i <5; i++){
			zeroList.add(1);
		}
		ArrayList<Stone> emptyList = new ArrayList<Stone>(0);
		for (int i = 0; i <5; i++){
			emptyList.add(Stone.EMPTY);
		}
		state = new ArrayList<ArrayList<ArrayList<Stone>>>(0);
		plays = new ArrayList<ArrayList<Integer>>(0);
		for (int i = 0; i <5; i++){
			state.add(new ArrayList<ArrayList<Stone>>(0));
			plays.add(new ArrayList<Integer>(zeroList));
			for (int j = 0; j <5; j++){
				state.get(i).add(new ArrayList<Stone>(emptyList));
			}
		}
		
	}
	
	public int setStone(int x, int y, Stone player){
		if (! player.equals(nextMove)){
			System.err.println("Wrong player. Move rejected!");
			return 0;
		}
		if (x<0 || x>4 || y <0 || y > 4){
			System.err.println("Move not allowed!");
			return 0;
		}
		Integer heightOfPlay = plays.get(x).get(y);
		if (heightOfPlay > 5){
			System.err.println("Move not allowed!");
			return 0;
		}
		nextMove = nextMove.switchColor();
		System.out.println(plays.get(x).toString());
		plays.get(x).set(y, heightOfPlay +1);
		state.get(x).get(y).set(heightOfPlay-1, player);
		if(checkForWinner(x, y, heightOfPlay-1, player)){
			System.err.println("PLAYER " + player.toString() + "WINS!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
		}
		return heightOfPlay;
	}
	
	
	private boolean checkForWinner(int x, int y, int z, Stone color) {
		boolean winner = false;
		int tmp = 1;
		int i = 1;
		// check level z
		
			// check x-axis
			i = 1;
			tmp = 1;
			while((x+i)< 5 && state.get(x+i).get(y).get(z).equals(color)){
				tmp++;
				i++;
			}
			i = 1;
			while((x-i)>=0 && state.get(x-i).get(y).get(z).equals(color)){
				tmp++;
				i++;
			}
			if (tmp > 3) return true;
			// check y-axis
			i = 1;
			tmp = 1;
			while((y+i)< 5 && state.get(x).get(y+i).get(z).equals(color)){
				tmp++;
				i++;
			}
			i = 1;
			while((y-i)>=0 && state.get(x).get(y-i).get(z).equals(color)){
				tmp++;
				i++;
			}
			if (tmp > 3) return true;
		// winner in z
		if (plays.get(x).get(x)>4){
			if (plays.get(x).get(x)>5){
				for (i = 1; i < 5; i++){
					if (! state.get(x).get(y).get(i).equals(color)){
						break;
					}
					return true;
				}
			}	
			for (i = 0; i < 4; i++){
				if (! state.get(x).get(y).get(i).equals(color)){
					break;
				}
				return true;
			}
		}
		return false;
	}

	public void print(){
		// Prints out the board
		System.out.println("STATE OF THE BOARD");
		for (int x = 0; x <5; x++){
			System.out.println("Row (" + (x+1) +")");
			for (int z=4; z >= 0 ; z --){
				for (int y = 0; y <5; y++){
					System.out.print("[" + state.get(x).get(y).get(z).toString() + "] ");
				}
				System.out.println(" ");
			}
		}
		
		
		// Prints out how many stones are at a field + 1
		System.out.println("HEIGHT OF NEXT PLAY");
		for (int i = 0; i <5; i++){
			System.out.println(Arrays.toString(plays.get(i).toArray()));
		}
	}

}
