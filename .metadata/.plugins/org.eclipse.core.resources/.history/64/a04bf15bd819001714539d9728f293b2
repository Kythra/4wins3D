import java.util.ArrayList;
import java.util.Arrays;


public class board {

	private ArrayList<ArrayList<ArrayList<Stone>>> state;
	private ArrayList<ArrayList<Integer>> plays;
	private Stone nextMove;
	private int maxHeight;
	
	public board() {
		ArrayList<Integer> zeroList = new ArrayList<Integer>(0);
		for (int i = 0; i <5; i++){
			zeroList.add(1);
		}
		ArrayList<Stone> emptyList = new ArrayList<Stone>(0);
		for (int i = 0; i <5; i++){
			emptyList.add(Stone.EMPTY);
		}
		state = new ArrayList<ArrayList<ArrayList<Stone>>>(0);
		plays = new ArrayList<ArrayList<Integer>>(0);
		for (int i = 0; i <5; i++){
			state.add(new ArrayList<ArrayList<Stone>>(0));
			plays.add(new ArrayList<Integer>(zeroList));
			for (int j = 0; j <5; j++){
				state.get(i).add(new ArrayList<Stone>(emptyList));
			}
		}
		nextMove = Stone.random();
		maxHeight = 0;
	}
	
	public board(Stone startingPlayer){
		switch(startingPlayer){
		case EMPTY: 
			System.err.println("Not a player. Player is chosen randomly");
			nextMove = Stone.random();
		default:
			nextMove = startingPlayer;
		}
		ArrayList<Integer> zeroList = new ArrayList<Integer>(0);
		for (int i = 0; i <5; i++){
			zeroList.add(1);
		}
		ArrayList<Stone> emptyList = new ArrayList<Stone>(0);
		for (int i = 0; i <5; i++){
			emptyList.add(Stone.EMPTY);
		}
		state = new ArrayList<ArrayList<ArrayList<Stone>>>(0);
		plays = new ArrayList<ArrayList<Integer>>(0);
		for (int i = 0; i <5; i++){
			state.add(new ArrayList<ArrayList<Stone>>(0));
			plays.add(new ArrayList<Integer>(zeroList));
			for (int j = 0; j <5; j++){
				state.get(i).add(new ArrayList<Stone>(emptyList));
			}
		}
		maxHeight = 0;
	}
	
	public Stone whosTurn(){
		System.out.println("Player " + nextMove.toString() + " is next.");
		return nextMove;
	}
	
	public Stone setStone(int x, int y, Stone player){
		if (! player.equals(nextMove)){
			System.err.println("Wrong player. Move rejected!");
			return Stone.EMPTY;
		}
		if (x<0 || x>4 || y <0 || y > 4){
			System.err.println("Move not allowed!");
			return Stone.EMPTY;
		}
		Integer heightOfPlay = plays.get(x).get(y);
		if (heightOfPlay > 5){
			System.err.println("Move not allowed!");
			return Stone.EMPTY;
		}
		nextMove = nextMove.switchColor();
		plays.get(x).set(y, heightOfPlay +1);
		state.get(x).get(y).set(heightOfPlay-1, player);
		if (heightOfPlay > maxHeight){
			maxHeight++;
		}
		if(checkForWinner(x, y, heightOfPlay-1, player)){
			System.err.println("PLAYER " + player.toString() + " WINS!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
			return player;
		}
		return Stone.EMPTY;
	}
	
	
	private boolean checkForWinner(int x, int y, int z, Stone color) {
		int tmp = 1;
		int i = 1;
		// check all diagonals in 2 dimensions
		// y level
		i = 1;
		tmp = 1;
		while(inRange(x+i) && inRange(z+i) && positionOccupiedByPlayer(x+i, y, z+i, color)){
			tmp++;
			i++;
		}
		i = 1;
		while(inRange(x-i) && inRange(z-i) && positionOccupiedByPlayer(x-i, y, z-i, color)){
			tmp++;
			i++;
		}
		if (tmp > 3) {
			System.err.println("Wins in diagonal");
			return true;
		}
		//next x level
		i = 1;
		tmp = 1;
		while((y+i)< 5 && (z+i)<5 && state.get(x).get(y+i).get(z+i).equals(color)){
			tmp++;
			i++;
		}
		i = 1;
		while((y-i)>=0 && (z-i) >= 0 && state.get(x).get(y-i).get(z-i).equals(color)){
			tmp++;
			i++;
		}
		if (tmp > 3) {
			System.err.println("Wins in diagonal");
			return true;
		}
		//next y level
		i = 1;
		tmp = 1;
		while((x+i)< 5 && (z-i) >= 0 && state.get(x+i).get(y).get(z-i).equals(color)){
			tmp++;
			i++;
		}
		i = 1;
		while((x-i)>=0 && (z+i)<5 && state.get(x-i).get(y).get(z+i).equals(color)){
			tmp++;
			i++;
		}
		if (tmp > 3) {
			System.err.println("Wins in diagonal");
			return true;
		}
		//next x level
				i = 1;
				tmp = 1;
				while((y+i)< 5 && (z-i) >= 0 && state.get(x).get(y+i).get(z-i).equals(color)){
					tmp++;
					i++;
				}
				i = 1;
				while((y-i)>=0 && (z+i)<5 && state.get(x).get(y-i).get(z+i).equals(color)){
					tmp++;
					i++;
				}
				if (tmp > 3) {
					System.err.println("Wins in diagonal");
					return true;
				}
		// check all diagonals in 3 dimensions
				i = 1;
				tmp = 1;
				while((x+i)< 5 && (y+i)<5 && (z+i)<5 && state.get(x+i).get(y+i).get(z+i).equals(color)){
					tmp++;
					i++;
				}
				i = 1;
				while((x-i)>=0 && (y-i) >= 0 && (z-i) >= 0 && state.get(x-i).get(y-i).get(z-i).equals(color)){
					tmp++;
					i++;
				}
				if (tmp > 3) {
					System.err.println("Wins in diagonal");
					return true;
				}
				//next
				i = 1;
				tmp = 1;
				while((x+i)< 5 && (y+i)<5 && (z-i) >= 0 && state.get(x+i).get(y+i).get(z-i).equals(color)){
					tmp++;
					i++;
				}
				i = 1;
				while((x-i)>=0 && (y-i) >= 0 && (z+i)<5 && state.get(x-i).get(y-i).get(z+i).equals(color)){
					tmp++;
					i++;
				}
				if (tmp > 3) {
					System.err.println("Wins in diagonal");
					return true;
				}
				//next
				i = 1;
				tmp = 1;
				while((x-i)>=0 && (y+i)<5 && (z+i)<5 && state.get(x-i).get(y+i).get(z+i).equals(color)){
					tmp++;
					i++;
				}
				i = 1;
				while((x+i)< 5 && (y-i) >= 0 && (z-i) >= 0 && state.get(x+i).get(y-i).get(z-i).equals(color)){
					tmp++;
					i++;
				}
				if (tmp > 3) {
					System.err.println("Wins in diagonal");
					return true;
				}
				//next
				i = 1;
				tmp = 1;
				while((x+i)< 5 && (y-i) >= 0 && (z+i)<5 && state.get(x+i).get(y-i).get(z+i).equals(color)){
					tmp++;
					i++;
				}
				i = 1;
				while((x-i)>=0 && (y+i)<5 && (z-i) >= 0 && state.get(x-i).get(y+i).get(z-i).equals(color)){
					tmp++;
					i++;
				}
				if (tmp > 3) {
					System.err.println("Wins in diagonal");
					return true;
				}
				//next
		// check level z
			// check diagonals right-up
			i = 1;
			tmp = 1;
			while((x+i)< 5 && (y+i)<5 && state.get(x+i).get(y+i).get(z).equals(color)){
				tmp++;
				i++;
			}
			i = 1;
			while((x-i)>=0 && (y-i) >= 0 && state.get(x-i).get(y-i).get(z).equals(color)){
				tmp++;
				i++;
			}
			if (tmp > 3) {
				System.err.println("Wins in diagonal on level z");
				return true;
			}
			// check diagonals right-down
			i = 1;
			tmp = 1;
			while((x+i)< 5 && (y-i) >= 0 && state.get(x+i).get(y-i).get(z).equals(color)){
				tmp++;
				i++;
			}
			i = 1;
			while((x-i)>=0 && (y+i)<5 && state.get(x-i).get(y+i).get(z).equals(color)){
				tmp++;
				i++;
			}
			if (tmp > 3) {
				System.err.println("Wins in diagonal on level z");
				return true;
			}
			// check x-axis
			i = 1;
			tmp = 1;
			while((x+i)< 5 && state.get(x+i).get(y).get(z).equals(color)){
				tmp++;
				i++;
			}
			i = 1;
			while((x-i)>=0 && state.get(x-i).get(y).get(z).equals(color)){
				tmp++;
				i++;
			}
			if (tmp > 3) {
				System.err.println("Wins in x-axis on level z");
				return true;
			}
			// check y-axis
			i = 1;
			tmp = 1;
			while((y+i)< 5 && state.get(x).get(y+i).get(z).equals(color)){
				tmp++;
				i++;
			}
			i = 1;
			while((y-i)>=0 && state.get(x).get(y-i).get(z).equals(color)){
				tmp++;
				i++;
			}
			if (tmp > 3) {
				System.err.println("Wins in y-axis on level z");
				return true;
			}
		// winner in z
		if (plays.get(x).get(y)>4){
			if (plays.get(x).get(y)>5){
				for (i = 1; i < 5; i++){
					if (! state.get(x).get(y).get(i).equals(color)){
						break;
					}
					System.err.println("Wins in height");
					return true;
				}
			}	
			for (i = 0; i < 4; i++){
				if (! state.get(x).get(y).get(i).equals(color)){
					break;
				}
				System.err.println("Wins in height");
				return true;
			}
		}
		return false;
	}
	
	private boolean inRange(int i){
		// all possible positions on every axis lie between 0 and 4 inclusively
		if (0<= i && i <= 4) return true;
		return false;
	}
	private boolean positionOccupiedByPlayer(int x, int y, int z, Stone player){
		if (state.get(x).get(y).get(z).equals(player)) return true;
		return false;
	}

	public void print(){
		// Prints out the board
		System.out.println("STATE OF THE BOARD");
		for (int x = 0; x <5; x++){
			System.out.println("Row (" + (x+1) +")");
			for (int z=4; z >= 0 ; z --){
				for (int y = 0; y <5; y++){
					System.out.print("[" + state.get(x).get(y).get(z).toString() + "] ");
				}
				System.out.println(" ");
			}
		}
		
		
		// Prints out how many stones are at a field + 1
		System.out.println("HEIGHT OF NEXT PLAY");
		for (int i = 0; i <5; i++){
			System.out.println(Arrays.toString(plays.get(i).toArray()));
		}
		System.out.println("The maximum height is "+ maxHeight);
	}

}
